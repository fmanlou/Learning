!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABUF_FREE	abuf.h	47;"	d
AXEL_ABUF_H	abuf.h	36;"	d
AXEL_AXEL_H	axel.h	44;"	d
AXEL_CONF_H	conf.h	43;"	d
AXEL_CONN_H	conn.h	43;"	d
AXEL_FTP_H	ftp.h	42;"	d
AXEL_HTTP_H	http.h	44;"	d
AXEL_SEARCH_H	search.h	40;"	d
AXEL_SLEEP_H	sleep.h	36;"	d
AXEL_SSL_H	ssl.h	40;"	d
AXEL_TCP_H	tcp.h	42;"	d
DEFAULT_IO_TIMEOUT	axel.h	93;"	d
DEFAULT_USER_AGENT	axel.h	94;"	d
DN_MATCH_MALFORMED	axel.h	150;"	d
DN_NEQ	dn-match.c	39;"	d	file:
FTP_PASSIVE	ftp.h	44;"	d
FTP_PORT	ftp.h	45;"	d
HDR_CHUNK	http.c	51;"	d	file:
HDR_USER_AGENT	conf.h	/^	HDR_USER_AGENT,$/;"	e	enum:__anon7
HDR_count_init	conf.h	/^	HDR_count_init,$/;"	e	enum:__anon7
KEY	conf.c	49;"	d	file:
MATCH	conf.c	48;"	d	file:
MAX_ADD_HEADERS	axel.h	91;"	d
MAX_REDIRECT	axel.h	92;"	d
MAX_REDIR_OPT	text.c	65;"	d	file:
MAX_STRING	axel.h	90;"	d
MIN_CHUNK_WORTH	axel.c	66;"	d	file:
PRINTF_FUNC	axel.h	75;"	d
PRINTF_FUNC	axel.h	77;"	d
PROTO_DEFAULT	conn.h	70;"	d
PROTO_DEFAULT_PORT	conn.h	71;"	d
PROTO_FTP	conn.h	58;"	d
PROTO_FTPS	conn.h	61;"	d
PROTO_FTPS_PORT	conn.h	62;"	d
PROTO_FTP_PORT	conn.h	59;"	d
PROTO_HTTP	conn.h	64;"	d
PROTO_HTTPS	conn.h	67;"	d
PROTO_HTTPS_PORT	conn.h	68;"	d
PROTO_HTTP_PORT	conn.h	65;"	d
PROTO_INSECURE	conn.h	48;"	d
PROTO_IS_FTP	conn.h	53;"	d
PROTO_IS_SECURE	conn.h	55;"	d
PROTO_PROTO_FTP	conn.h	50;"	d
PROTO_PROTO_HTTP	conn.h	51;"	d
PROTO_PROTO_MASK	conn.h	46;"	d
PROTO_SECURE	conn.h	49;"	d
PROTO_SECURE_MASK	conn.h	45;"	d
SPEED_ACTIVE	search.c	/^	SPEED_ACTIVE  = -3,$/;"	e	enum:__anon11	file:
SPEED_DONE	search.c	/^	SPEED_DONE    = -1,$/;"	e	enum:__anon11	file:
SPEED_FAILED	search.c	/^	SPEED_FAILED  = -2,$/;"	e	enum:__anon11	file:
SPEED_PENDING	search.c	/^	SPEED_PENDING =  0,$/;"	e	enum:__anon11	file:
TCP_FASTOPEN_CONNECT	tcp.c	55;"	d	file:
TCP_FASTOPEN_CONNECT	tcp.c	57;"	d	file:
_	axel.h	82;"	d
_	axel.h	86;"	d
_ISOC99_SOURCE	abuf.c	35;"	d	file:
_POSIX_C_SOURCE	sleep.c	36;"	d	file:
_POSIX_C_SOURCE	tcp.c	43;"	d	file:
abuf_printf	abuf.c	/^abuf_printf(abuf_t *abuf, const char *fmt, ...)$/;"	f
abuf_setup	abuf.c	/^abuf_setup(abuf_t *abuf, size_t len)$/;"	f
abuf_strcat	abuf.c	/^abuf_strcat(abuf_t *abuf, const char *src)$/;"	f
abuf_t	abuf.h	/^} abuf_t;$/;"	t	typeref:struct:__anon5
add_header	conf.h	/^	char add_header[MAX_ADD_HEADERS][MAX_STRING];$/;"	m	struct:__anon6
add_header_count	conf.h	/^	int add_header_count;$/;"	m	struct:__anon6
ai_family	conf.h	/^	sa_family_t ai_family;$/;"	m	struct:__anon6
ai_family	tcp.h	/^	sa_family_t ai_family;$/;"	m	struct:__anon3
alt_id	text.c	/^alt_id(int n)$/;"	f	file:
alternate_output	conf.h	/^	int alternate_output;$/;"	m	struct:__anon6
auth	http.h	/^	char auth[MAX_STRING];$/;"	m	struct:__anon10
axel_close	axel.c	/^axel_close(axel_t *axel)$/;"	f
axel_divide	axel.c	/^axel_divide(axel_t *axel)$/;"	f	file:
axel_do	axel.c	/^axel_do(axel_t *axel)$/;"	f
axel_fscanf	conf.c	/^axel_fscanf(FILE *fp, const char *format, ...)$/;"	f	file:
axel_gettime	axel.c	/^axel_gettime(void)$/;"	f
axel_message	axel.c	/^axel_message(axel_t *axel, const char *format, ...)$/;"	f	file:
axel_new	axel.c	/^axel_new(conf_t *conf, int count, const search_t *res)$/;"	f
axel_open	axel.c	/^axel_open(axel_t *axel)$/;"	f
axel_options	text.c	/^static struct option axel_options[] = {$/;"	v	typeref:struct:option	file:
axel_size_human	text.c	/^axel_size_human(char *dst, size_t len, size_t value)$/;"	f
axel_sleep	sleep.c	/^axel_sleep(struct timespec delay)$/;"	f
axel_start	axel.c	/^axel_start(axel_t *axel)$/;"	f
axel_t	axel.h	/^} axel_t;$/;"	t	typeref:struct:__anon9
buffer	axel.c	/^static char *buffer = NULL;$/;"	v	file:
buffer_size	conf.h	/^	int buffer_size;$/;"	m	struct:__anon6
bytes_done	axel.h	/^	off_t bytes_done, start_byte, size;$/;"	m	struct:__anon9
bytes_per_second	axel.h	/^	long long int bytes_per_second;$/;"	m	struct:__anon9
chain_next	http.c	/^chain_next(const char ***p)$/;"	f	file:
conf	axel.h	/^	conf_t *conf;$/;"	m	struct:__anon9
conf	conn.h	/^	conf_t *conf;$/;"	m	struct:__anon2
conf	search.h	/^	conf_t *conf;$/;"	m	struct:__anon4
conf	ssl.c	/^static conf_t *conf = NULL;$/;"	v	file:
conf_free	conf.c	/^conf_free(conf_t *conf)$/;"	f
conf_hdr_make	conf.h	/^conf_hdr_make(char *dst, const char *k, const char *v)$/;"	f
conf_init	conf.c	/^conf_init(conf_t *conf)$/;"	f
conf_loadfile	conf.c	/^conf_loadfile(conf_t *conf, const char *file)$/;"	f
conf_t	conf.h	/^} conf_t;$/;"	t	typeref:struct:__anon6
conn	axel.h	/^	conn_t *conn;$/;"	m	struct:__anon9
conn_disconnect	conn.c	/^conn_disconnect(conn_t *conn)$/;"	f
conn_exec	conn.c	/^conn_exec(conn_t *conn)$/;"	f
conn_info	conn.c	/^conn_info(conn_t *conn)$/;"	f
conn_info_ftp	conn.c	/^conn_info_ftp(conn_t *conn)$/;"	f	file:
conn_info_status_get	conn.c	/^conn_info_status_get(char *msg, size_t size, conn_t *conn)$/;"	f
conn_init	conn.c	/^conn_init(conn_t *conn)$/;"	f
conn_set	conn.c	/^conn_set(conn_t *conn, const char *set_url)$/;"	f
conn_setup	conn.c	/^conn_setup(conn_t *conn)$/;"	f
conn_t	conn.h	/^} conn_t;$/;"	t	typeref:struct:__anon2
conn_url	conn.c	/^conn_url(char *dst, size_t len, conn_t *conn)$/;"	f
connection_timeout	conf.h	/^	int connection_timeout;$/;"	m	struct:__anon6
currentbyte	conn.h	/^	off_t currentbyte;$/;"	m	struct:__anon2
cwd	ftp.h	/^	char cwd[MAX_STRING];$/;"	m	struct:__anon1
data_tcp	ftp.h	/^	tcp_t data_tcp;$/;"	m	struct:__anon1
decode_nibble	http.c	/^decode_nibble(char n)$/;"	f	file:
default_filename	conf.h	/^	char default_filename[MAX_STRING];$/;"	m	struct:__anon6
delay_time	axel.h	/^	struct timespec delay_time;$/;"	m	struct:__anon9	typeref:struct:__anon9::timespec
dir	conn.h	/^	char dir[MAX_STRING];$/;"	m	struct:__anon2
dn_match	dn-match.c	/^dn_match(const char *hostname, const char *pat, size_t pat_len)$/;"	f
enabled	conn.h	/^	bool enabled;$/;"	m	struct:__anon2
encode_byte	http.c	/^encode_byte(char dst[3], char n)$/;"	f	file:
encode_nibble	http.c	/^encode_nibble(char n)$/;"	f	file:
fd	tcp.h	/^	int fd;$/;"	m	struct:__anon3
file	conn.h	/^	char file[MAX_STRING];$/;"	m	struct:__anon2
filename	axel.h	/^	char filename[MAX_STRING];$/;"	m	struct:__anon9
finish_time	axel.h	/^	int next_state, finish_time;$/;"	m	struct:__anon9
firstbyte	http.h	/^	off_t firstbyte;$/;"	m	struct:__anon10
ftp	conn.h	/^	ftp_t ftp[1];$/;"	m	struct:__anon2
ftp_command	ftp.c	/^ftp_command(ftp_t *conn, const char *format, ...)$/;"	f
ftp_connect	ftp.c	/^ftp_connect(ftp_t *conn, int proto, char *host, int port, char *user,$/;"	f
ftp_cwd	ftp.c	/^ftp_cwd(ftp_t *conn, char *cwd)$/;"	f
ftp_data	ftp.c	/^ftp_data(ftp_t *conn, unsigned io_timeout)$/;"	f
ftp_disconnect	ftp.c	/^ftp_disconnect(ftp_t *conn)$/;"	f
ftp_mode	ftp.h	/^	int ftp_mode;$/;"	m	struct:__anon1
ftp_size	ftp.c	/^ftp_size(ftp_t *conn, char *file, int maxredir, unsigned io_timeout)$/;"	f
ftp_t	ftp.h	/^} ftp_t;$/;"	t	typeref:struct:__anon1
ftp_wait	ftp.c	/^ftp_wait(ftp_t *conn)$/;"	f
get_if_ip	tcp.c	/^get_if_ip(char *dst, size_t len, const char *iface)$/;"	f
get_term_width	text.c	/^get_term_width(void)$/;"	f	file:
getopt_long	text.c	68;"	d	file:
headers	http.h	/^	abuf_t request[1], headers[1];$/;"	m	struct:__anon10
host	conn.h	/^	char host[MAX_STRING];$/;"	m	struct:__anon2
host	http.h	/^	char host[MAX_STRING];$/;"	m	struct:__anon10
http	conn.h	/^	http_t http[1];$/;"	m	struct:__anon2
http_addheader	http.c	/^http_addheader(http_t *conn, const char *format, ...)$/;"	f
http_auth_token	http.c	/^http_auth_token(char *token, const char *user, const char *pass)$/;"	f	file:
http_connect	http.c	/^http_connect(http_t *conn, int proto, char *proxy, char *host, int port,$/;"	f
http_decode	http.c	/^http_decode(char *s)$/;"	f
http_disconnect	http.c	/^http_disconnect(http_t *conn)$/;"	f
http_encode	http.c	/^http_encode(char *s, size_t len)$/;"	f
http_exec	http.c	/^http_exec(http_t *conn)$/;"	f
http_filename	http.c	/^http_filename(const http_t *conn, char *filename)$/;"	f
http_get	http.c	/^http_get(http_t *conn, char *lurl)$/;"	f
http_header	http.c	/^http_header(const http_t *conn, const char *header)$/;"	f
http_proxy	conf.h	/^	char http_proxy[MAX_STRING];$/;"	m	struct:__anon6
http_size	http.c	/^http_size(http_t *conn)$/;"	f
http_size_from_range	http.c	/^http_size_from_range(http_t *conn)$/;"	f
http_t	http.h	/^} http_t;$/;"	t	typeref:struct:__anon10
if_t	axel.h	/^typedef message_t if_t;$/;"	t
insecure	conf.h	/^	int insecure;$/;"	m	struct:__anon6
interfaces	conf.h	/^	if_t *interfaces;$/;"	m	struct:__anon6
io_timeout	conf.h	/^	unsigned io_timeout;$/;"	m	struct:__anon6
is_default_port	http.c	/^is_default_port(int proto, int port)$/;"	f	file:
is_ipv6_addr	tcp.c	/^int is_ipv6_addr(const char *hostname) {$/;"	f
is_proto_http	conn.h	/^is_proto_http(int proto)$/;"	f
last_message	axel.h	/^	message_t *message, *last_message;$/;"	m	struct:__anon9
last_transfer	conn.h	/^	int last_transfer;$/;"	m	struct:__anon2
lastbyte	conn.h	/^	off_t lastbyte;$/;"	m	struct:__anon2
lastbyte	http.h	/^	off_t lastbyte;$/;"	m	struct:__anon10
len	abuf.h	/^	size_t len;$/;"	m	struct:__anon5
local_if	conn.h	/^	char *local_if;$/;"	m	struct:__anon2
local_if	ftp.h	/^	char *local_if;$/;"	m	struct:__anon1
local_if	http.h	/^	char *local_if;$/;"	m	struct:__anon10
lock	conn.h	/^	pthread_mutex_t lock;$/;"	m	struct:__anon2
log2i	text.c	/^log2i(unsigned long long x)$/;"	f	file:
main	search.c	/^main(int argc, char *argv[])$/;"	f
main	text.c	/^main(int argc, char *argv[])$/;"	f
match	ssl_verify.c	/^match(const char *hostname, ASN1_STRING *certname)$/;"	f	file:
matches_cert	ssl_verify.c	/^matches_cert(const char *hostname, const X509 *cert)$/;"	f	file:
matches_cn	ssl_verify.c	/^matches_cn(const char *hostname, const X509 *cert)$/;"	f	file:
max	axel.h	119;"	d
max_redirect	conf.h	/^	int max_redirect;$/;"	m	struct:__anon6
max_speed	conf.h	/^	unsigned long long max_speed;$/;"	m	struct:__anon6
message	axel.h	/^	message_t *message, *last_message;$/;"	m	struct:__anon9
message	conn.h	/^	char *message;$/;"	m	struct:__anon2
message	ftp.h	/^	char *message;$/;"	m	struct:__anon1
message_t	axel.h	/^} message_t;$/;"	t	typeref:struct:__anon8
min	axel.h	113;"	d
next	axel.h	/^	void *next;$/;"	m	struct:__anon8
next_state	axel.h	/^	int next_state, finish_time;$/;"	m	struct:__anon9
no_clobber	conf.h	/^	int no_clobber;$/;"	m	struct:__anon6
no_proxy	conf.h	/^	char no_proxy[MAX_STRING];$/;"	m	struct:__anon6
num_connections	conf.h	/^	uint16_t num_connections;$/;"	m	struct:__anon6
outfd	axel.h	/^	int outfd;$/;"	m	struct:__anon9
output_filename	conn.h	/^	char output_filename[MAX_STRING];$/;"	m	struct:__anon2
p	abuf.h	/^	char *p;$/;"	m	struct:__anon5
parse_interfaces	conf.c	/^parse_interfaces(conf_t *conf, char *s)$/;"	f
parse_protocol	conf.c	/^parse_protocol(conf_t *conf, const char *value)$/;"	f	file:
pass	conn.h	/^	char pass[MAX_STRING];$/;"	m	struct:__anon2
port	conn.h	/^	int port;$/;"	m	struct:__anon2
port	http.h	/^	int port;$/;"	m	struct:__anon10
print_alternate_output	text.c	/^print_alternate_output(axel_t *axel)$/;"	f	file:
print_alternate_output_progress	text.c	/^print_alternate_output_progress(axel_t *axel, char *progress, int width,$/;"	f	file:
print_commas	text.c	/^print_commas(off_t bytes_done)$/;"	f
print_help	text.c	/^print_help(void)$/;"	f
print_messages	text.c	/^print_messages(axel_t *axel)$/;"	f
print_progress	text.c	/^print_progress(off_t cur, off_t prev, off_t total, double kbps)$/;"	f	file:
print_version	text.c	/^print_version(void)$/;"	f
print_version_info	text.c	/^print_version_info(void)$/;"	f
proto	conn.h	/^	int proto;$/;"	m	struct:__anon2
proto	ftp.h	/^	int proto;$/;"	m	struct:__anon1
proto	http.h	/^	int proto;		\/* FTP through HTTP proxies *\/$/;"	m	struct:__anon10
proxy	conn.h	/^	int proxy;$/;"	m	struct:__anon2
proxy	http.h	/^	int proxy;$/;"	m	struct:__anon10
proxy_auth	http.h	/^	char proxy_auth[MAX_STRING];$/;"	m	struct:__anon10
reactivate_connection	axel.c	/^reactivate_connection(axel_t *axel, int thread)$/;"	f	file:
ready	axel.h	/^	int ready;$/;"	m	struct:__anon9
reconnect_delay	conf.h	/^	int reconnect_delay;$/;"	m	struct:__anon6
request	http.h	/^	abuf_t request[1], headers[1];$/;"	m	struct:__anon10
run	text.c	/^int run = 1;$/;"	v
save_state	axel.c	/^save_state(axel_t *axel)$/;"	f	file:
save_state_interval	conf.h	/^	int save_state_interval;$/;"	m	struct:__anon6
scheme_from_proto	conn.c	/^scheme_from_proto(int proto)$/;"	f
search_amount	conf.h	/^	int search_amount;$/;"	m	struct:__anon6
search_getspeeds	search.c	/^search_getspeeds(search_t *results, int count)$/;"	f
search_makelist	search.c	/^search_makelist(search_t *results, char *orig_url)$/;"	f
search_sortlist	search.c	/^search_sortlist(search_t *results, int count)$/;"	f
search_sortlist_qsort	search.c	/^search_sortlist_qsort(const void *a, const void *b)$/;"	f	file:
search_speedtest	search.c	/^search_speedtest(void *r)$/;"	f	file:
search_t	search.h	/^} search_t;$/;"	t	typeref:struct:__anon4
search_threads	conf.h	/^	int search_threads;$/;"	m	struct:__anon6
search_timeout	conf.h	/^	int search_timeout;$/;"	m	struct:__anon6
search_top	conf.h	/^	int search_top;$/;"	m	struct:__anon6
setup_thread	axel.c	/^setup_thread(void *c)$/;"	f	file:
setup_thread	conn.h	/^	pthread_t setup_thread[1];$/;"	m	struct:__anon2
size	axel.h	/^	off_t bytes_done, start_byte, size;$/;"	m	struct:__anon9
size	conn.h	/^	off_t size; \/* File size, not 'connection size'.. *\/$/;"	m	struct:__anon2
size	search.h	/^	off_t speed, size;$/;"	m	struct:__anon4
speed	search.h	/^	off_t speed, size;$/;"	m	struct:__anon4
speed_start_time	search.h	/^	double speed_start_time;$/;"	m	struct:__anon4
speed_thread	search.h	/^	pthread_t speed_thread[1];$/;"	m	struct:__anon4
ssl	tcp.h	/^	SSL *ssl;$/;"	m	struct:__anon3
ssl_connect	ssl.c	/^ssl_connect(int fd, char *hostname)$/;"	f
ssl_disconnect	ssl.c	/^ssl_disconnect(SSL *ssl)$/;"	f
ssl_init	ssl.c	/^ssl_init(conf_t *global_conf)$/;"	f
ssl_inited	ssl.c	/^static bool ssl_inited = false;$/;"	v	file:
ssl_lock	ssl.c	/^static pthread_mutex_t ssl_lock;$/;"	v	file:
ssl_startup	ssl.c	/^ssl_startup(void)$/;"	f	file:
ssl_validate_hostname	ssl_verify.c	/^ssl_validate_hostname(const char *hostname, const X509 *cert)$/;"	f
start_byte	axel.h	/^	off_t bytes_done, start_byte, size;$/;"	m	struct:__anon9
start_time	axel.h	/^	double start_time;$/;"	m	struct:__anon9
state	conn.h	/^	bool state;$/;"	m	struct:__anon2
status	ftp.h	/^	int status;$/;"	m	struct:__anon1
status	http.h	/^	int status;$/;"	m	struct:__anon10
stfile_access	axel.c	/^stfile_access(const char *bname, int mode)$/;"	f	file:
stfile_makename	axel.c	/^stfile_makename(const char *bname)$/;"	f	file:
stfile_open	axel.c	/^stfile_open(const char *bname, int flags, mode_t mode)$/;"	f	file:
stfile_unlink	axel.c	/^stfile_unlink(const char *bname)$/;"	f	file:
stop	text.c	/^stop(int signal)$/;"	f
strip_cgi_parameters	conf.h	/^	int strip_cgi_parameters;$/;"	m	struct:__anon6
supported	conn.h	/^	bool supported;$/;"	m	struct:__anon2
tcp	conn.h	/^	tcp_t *tcp;$/;"	m	struct:__anon2
tcp	ftp.h	/^	tcp_t tcp;$/;"	m	struct:__anon1
tcp	http.h	/^	tcp_t tcp;$/;"	m	struct:__anon10
tcp_close	tcp.c	/^tcp_close(tcp_t *tcp)$/;"	f
tcp_connect	tcp.c	/^tcp_connect(tcp_t *tcp, char *hostname, int port, int secure, char *local_if,$/;"	f
tcp_error	tcp.c	/^tcp_error(char *hostname, int port, const char *reason)$/;"	f	file:
tcp_read	tcp.c	/^tcp_read(tcp_t *tcp, void *buffer, int size)$/;"	f
tcp_t	tcp.h	/^} tcp_t;$/;"	t	typeref:struct:__anon3
tcp_write	tcp.c	/^tcp_write(tcp_t *tcp, void *buffer, int size)$/;"	f
text	axel.h	/^	char text[MAX_STRING];$/;"	m	struct:__anon8
time_human	text.c	/^time_human(char *dst, size_t len, unsigned int value)$/;"	f
url	axel.h	/^	url_t *url;$/;"	m	struct:__anon9
url	search.h	/^	char url[MAX_STRING];$/;"	m	struct:__anon4
url_t	axel.h	/^typedef message_t url_t;$/;"	t
user	conn.h	/^	char user[MAX_STRING];$/;"	m	struct:__anon2
verbose	conf.h	/^	int verbose;$/;"	m	struct:__anon6
